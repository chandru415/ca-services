receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

   # Gathers host-level metrics (CPU, memory, disk, etc.)
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      memory:
      disk:
      network:
      load:
      filesystem:

processors:
  # Batches data to improve export efficiency
  batch:
    timeout: 5s
    send_batch_size: 1000

  # Adds or modifies resource attributes (service name, environment, etc.)
  resource:
    attributes:
      - key: environment
        value: production # <-- **CUSTOMIZE THIS** (e.g., development, staging, production)
        action: upsert
      - key: service.version
        value: "1.0.0" # <-- **CUSTOMIZE THIS** (your application version)
        action: upsert
      # Consider adding service.name here as well if not set by the SDK
      # - key: service.name
      #   value: "YourService.Api" # <-- **CUSTOMIZE THIS**
      #   action: upsert

  # Samples traces probabilistically
  # Requires a collector distribution with the 'probabilistic_sampler' processor
  # Only applicable to trace pipelines
  probabilistic_sampler:
    hash_seed: 22 # Keep consistent to sample same traces across collectors
    sampling_percentage: 30 # <-- **CUSTOMIZE THIS** (e.g., 100 for development, lower for prod)
exporters:
  debug:
    verbosity: detailed
  prometheus:
    endpoint: ":9201"
    send_timestamps: true
    metric_expiration: 180m
    enable_open_metrics: true
  otlp:
    endpoint: jaeger:4317
    tls:
      insecure: true

service:
  # Configuration for the collector's own telemetry metrics
  telemetry:
    metrics:
      level: detailed
      address: 0.0.0.0:8888 # Default port to scrape collector metrics
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [debug, otlp]
    metrics:
      receivers: [otlp, hostmetrics]
      exporters: [debug, prometheus]
    logs:
      receivers: [otlp]
      exporters: [debug]